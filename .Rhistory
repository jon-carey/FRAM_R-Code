gather(Region,Mort,c(6:11))
# Pull out morts that will be distributed based on fishery location, summarize, and allocate to regions
if(dim(Mort[Mort$Mort_Dist_Type == 2, ])[1] > 0) {
# Non-WCVI mortalities
Mort_hybridStyle <- summaryBy(Mort~RunType+RunYear+SheltonStk+TimeStep+Region,
data = Mort[Mort$Mort_Dist_Type == 2, ], FUN = sum, keep.names = TRUE)
}
# Combine adhocStyle and hybridStyle mort tables
if(sum(unique(Mort[ ,8])) == 1) {Mort <- Mort_adHocStyle}
if(sum(unique(Mort[ ,8])) == 3) {Mort <- rbind(Mort_adHocStyle,Mort_hybridStyle)}
# Summarize and reformat mortalities
Mort <- summaryBy(Mort~RunType+RunYear+SheltonStk+TimeStep+Region,
data = Mort, FUN = sum, keep.names = TRUE)
Mort <- Mort %>%
spread(Region, Mort, c(1:4))
Mort <- Mort[ ,c(1:4,9,6,8,5,7,10)]
# Merge cohort data with mortality data
Cohort <- merge(Cohort, Mort, all.x = TRUE)
Cohort[is.na(Cohort)] <- 0
# Cohort$PostFisheryAbund <- Cohort$StartCohort - Cohort$Mort
# Calculate post-fishery abundances
Cohort$postFish.Salish <- Cohort$preFish.Salish - Cohort$mort.Salish
Cohort$postFish.NOF <- Cohort$preFish.NOF - Cohort$mort.NOF
Cohort$postFish.OR <- Cohort$preFish.OR - Cohort$mort.OR
Cohort$postFish.Cali <- Cohort$preFish.Cali - Cohort$mort.Cali
Cohort$postFish.North <- Cohort$preFish.North - (Cohort$mort.North)
Cohort$postFish.SWWCVI <- Cohort$preFish.SWWCVI - Cohort$mort.SWWCVI
# sum mortality and post-fishery totals across regions, rearrange
Cohort$Mort <- rowSums(Cohort[ ,c(18:22)])
Cohort$PostFisheryAbund <- rowSums(Cohort[ ,c(24:28)])
Cohort <- Cohort[order(Cohort$RunType, Cohort$RunYear, Cohort$SheltonStk, Cohort$TimeStep), c(3:4,1:2,5,30:31,12:29)]
write.csv(Cohort, paste(outfile,RunType_zero,"_4.19.21.csv",sep = ""))
# # Merge with Shelton distributions and apportion abundances
# Cohort <- merge(Cohort,SheltonDistsDF)
#
# Cohort$preFish.Salish <- Cohort$StartCohort * Cohort$SALISH
# Cohort$preFish.NOF <- Cohort$StartCohort * Cohort$NOF
# Cohort$preFish.OR <- Cohort$StartCohort * Cohort$OR
# Cohort$preFish.Cali <- Cohort$StartCohort * Cohort$CALI
# Cohort$preFish.North <- Cohort$StartCohort * Cohort$NORTH
# Cohort$preFish.SWWCVI <- Cohort$StartCohort * Cohort$SWWCVI
#
# Cohort$mort.Salish <- Cohort$Mort * Cohort$SALISH
# Cohort$mort.NOF <- Cohort$Mort * Cohort$NOF
# Cohort$mort.OR <- Cohort$Mort * Cohort$OR
# Cohort$mort.Cali <- Cohort$Mort * Cohort$CALI
# Cohort$mort.North <- Cohort$Mort * Cohort$NORTH
# Cohort$mort.SWWCVI <- Cohort$Mort * Cohort$SWWCVI
#
# Cohort$postFish.Salish <- Cohort$PostFisheryAbund * Cohort$SALISH
# Cohort$postFish.NOF <- Cohort$PostFisheryAbund * Cohort$NOF
# Cohort$postFish.OR <- Cohort$PostFisheryAbund * Cohort$OR
# Cohort$postFish.Cali <- Cohort$PostFisheryAbund * Cohort$CALI
# Cohort$postFish.North <- Cohort$PostFisheryAbund * Cohort$NORTH
# Cohort$postFish.SWWCVI <- Cohort$PostFisheryAbund * Cohort$SWWCVI
# Cohort <- Cohort[order(Cohort$RunType, Cohort$RunYear, Cohort$SheltonStk, Cohort$TimeStep), c(3:4,1,5,2,6:8,15:32)]
#
# write.csv(Cohort, paste(outfile,"ZeroPS_adhocStyle.csv",sep = ""))
# PreFisheryAbundance <- summaryBy(preFish.Salish+preFish.NOF+preFish.OR+preFish.Cali+preFish.North+preFish.SWWCVI~RunType+RunYear+TimeStep,
#                                  data = Cohort, FUN = sum, keep.names = TRUE)
# write.csv(PreFisheryAbundance, paste(outfile,RunType_zero,"_PreFisheryAbund.csv",sep = ""))
#
# PostFisheryAbundance <- summaryBy(postFish.Salish+postFish.NOF+postFish.OR+postFish.Cali+postFish.North+postFish.SWWCVI~RunType+RunYear+TimeStep,
#                                  data = Cohort, FUN = sum, keep.names = TRUE)
# write.csv(PostFisheryAbundance, paste(outfile,RunType_zero,"_PostFisheryAbund.csv",sep = ""))
###############################################################################################
# WARNING: Currently this hybrid approach cannot be applied to SRFC/KRFC/RRFC fishery impacts #
#          or to WCVI fisheries in FRAM                                                       #
###############################################################################################
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(RODBC)
library(doBy)
library(readxl)
library(tidyr)
# Set range of years for analysis
MinYr <- 1992
MaxYr <- 2021
# Set scenario names
RunType_valid <- "Valid"
RunType_zero <- "ZeroPS_hybridStyle"
# is this a no PFMC harvest scenario? (yes == 1, no == 0)
# this is a flag to determine whether SOF fisheries get turned off in the no harvest scenario
PFMCflag <- 0
# Exclude Sac Fall? 0 = NO, 1 = YES
ExcSac <- 1
# Set the paths:
#   1 = Excel input file
#   2 = FRAM db for validation runs
#   3 = FRAM db zero runs
Dir <- "C:\\Users\\jonathan.carey\\Documents\\PFMC\\STT\\2021\\FRAM\\Chinook\\Chin3721\\SRKW\\"
paths = list(paste(Dir,"SRKW_Input_Chin3721.xlsx",sep = ""),
paste(Dir,"Valid2018_Round6.mdb",sep = ""),
paste(Dir,"Valid2018_ZeroPS.mdb",sep = ""))
# Set the input file path for the database containing FRAM runs
DBpath1 = paths[[2]]
DBpath2 = paths[[3]]
# Set output directory
outfile = Dir
# Read in data from Excel input file
StockDF <- read_excel(paths[[1]], sheet="FRAM to Shelton Stks")
SheltonDistsDF <- read_excel(paths[[1]], sheet="Shelton Dists")
FisheryRegion <- read_excel(paths[[1]], sheet="FisheryRegion")
UpColSprDF <- read_excel(paths[[1]], sheet="Up Col Spr Abundances")
SRFCRUNDF <- read_excel(paths[[1]], sheet="SRFC Run Dat")
SRFCHARVDF <- read_excel(paths[[1]], sheet="SRFC Harv Dat")
KRFCDF <- read_excel(paths[[1]], sheet="KRFC")
KRFCHarvDF <- read_excel(paths[[1]], sheet="KRFC Harvest")
ROPIDF <- read_excel(paths[[1]], sheet="ROPI")
# Pull Cohort & Mortality tables from FRAM databases
con = odbcConnectAccess(DBpath1)
Cohort_1 = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT * FROM Cohort"))
Mort_1 = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT * FROM Mortality"))
RunID_1 = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT * FROM RunID"))
NatMortDF <- sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT * FROM NaturalMortality"))
NatMortDF <- NatMortDF[NatMortDF$BasePeriodID == max(NatMortDF$BasePeriodID), ]
NatMortDF <- NatMortDF[order(NatMortDF$Age,NatMortDF$TimeStep), ]
close(con)
con = odbcConnectAccess(DBpath2)
Cohort_2 = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT * FROM Cohort"))
Mort_2 = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT * FROM Mortality"))
RunID_2 = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT * FROM RunID"))
close(con)
# Add run type and combine RunID tables, filter to desired years
RunID_1$RunType <- RunType_valid
RunID_2$RunType <- RunType_zero
RunIDs <- rbind(RunID_1[ ,c(2,11,12)],RunID_2[ ,c(2,11,12)])
RunIDs <- RunIDs[RunIDs$RunYear >= MinYr & RunIDs$RunYear <= MaxYr, ]
rm(RunID_1, RunID_2)
##########---------- Non-FRAM Processing ----------##########
# This is a bit messy - copied and pasted sections from the Abundance and Harvest analysis codes, then adapted
#---- Upper Columbia Spring ---- (assumig no ocean harvest so same for both scenarios)
#subset the data to only the years of interest
UpColSpr <- subset(UpColSprDF, RunYear >= MinYr & RunYear <= MaxYr)
colnames(UpColSpr)[5] <- "StartCohort"
#For loop finds the age, calculates terminal run size before natural mortality.
for(i in 1:nrow(UpColSpr)){
UpColSpr$StartCohort[i] <- UpColSpr$StartCohort[i] /
(1-subset(NatMortDF, Age == UpColSpr$Age[i] & TimeStep == UpColSpr$TimeStep[i])$NaturalMortalityRate)
}
# Add RunType and append to Cohort Table
UCOLSPR_cohort <- rbind(UpColSpr,UpColSpr)
UCOLSPR_cohort$RunType <- c(rep(RunType_valid,dim(UpColSpr)[1]),rep(RunType_zero,dim(UpColSpr)[1]))
UCOLSPR_cohort <- UCOLSPR_cohort[ ,c(6,1:5)]
rm(UpColSpr)
#---- South of Falcon Stock Handling ----
#This section was coded by Will Satterthwaite and was distributed on 8.5.2019
#An alternative approach to estimating SRFC adult ocean abundance
#Assume 20% annual natural mortality of adult SRFC in ocean
#Equates to 1.842347% monthly mortality
m=0.01842347
#further assume all harvest takes place on first day of month (so don't have to adjust harvest for mortality over course of uknown portion of month before it was harvested)
#this means August 1 abundance = river run size scaled up to account for one month's mortality, plus August harvest
#July 1 abundance = August 1 abundance scaled up to account for one month's mortallity, plus July harvest
#and so on...
#This is nat mortality from each time step
m1 = 1-(1-.2)^(7/12)
m2 = 1-(1-.2)^(2/12)
m3 = 1-(1-.2)^(3/12)
years=c(MinYr:MaxYr)
SOF_cohort=array(NA,c(0,6))
colnames(SOF_cohort)=c("RunType","RunYear","SheltonStk","Age","TimeStep","StartCohort")
SOFHarv <- data.frame(RunYear = as.integer(), SheltonStk = as.character(), Age = as.integer(), TimeStep = as.integer(), Mort = as.integer())
#calculate SFB (SRFC, from SI) abundances
SheltonStk="CENTV"
Age=3
for (i in years) {
SRFC_river_run=SRFCRUNDF$SRFC_river_run[SRFCRUNDF$Year==i]
annual.harv=SRFCHARVDF[SRFCHARVDF$year==i,]
monthses=c(8,7,6,5,4,3,2,1,12,11,10,9) #this is the order to step through months in this simplified cohort reconstruction
monthly.abundance=array(NA,12)
step=1 # first calculate August 1 abundance
monthly.abundance[step]=SRFC_river_run/(1-m)+annual.harv$H[annual.harv$month==monthses[step]]
for (step in 2:12) { #now do remaining months
monthly.abundance[step]=monthly.abundance[step-1]/(1-m)+annual.harv$H[annual.harv$month==monthses[step]]
}
oct.abund_valid=monthly.abundance[11]
may.abund_valid=monthly.abundance[4]
july.abund_valid=monthly.abundance[2]
# oct.abund_zero=monthly.abundance[12]* 1-(1-.2)^(1/12) # this is old code with an error due to misplaced parentheses (subtracts nat_mort rather than multiply by 1-nat_mort)
oct.abund_zero=monthly.abundance[12]* (1-.2)^(1/12)
may.abund_zero=oct.abund_zero * (1-m1)
july.abund_zero=may.abund_zero * (1-m2)
year=array(i,3)
stock=array(SheltonStk,3)
ages=array(Age,3)
seasons=c(1:3) #seasons 1-3 correspond to abundances on Oct 1 (of calendar yr = mgmt yr-1), May 1, and July 1 respectively
yearly.abunds_valid=c(oct.abund_valid,may.abund_valid,july.abund_valid)
yearly.abunds_zero=c(oct.abund_zero,may.abund_zero,july.abund_zero)
CENTV_cohort_valid=cbind(rep(RunType_valid,3),year,stock,ages,seasons,yearly.abunds_valid)
if(PFMCflag == 1) { # if no PFMC harvest, SOF cohorts will be larger
CENTV_cohort_zero=cbind(rep(RunType_zero,3),year,stock,ages,seasons,yearly.abunds_zero)
}
if(PFMCflag == 0) { # if zero harvest scenario is for a non-PFMC area, PFMC fisheries will still occur and SOF cohorts will be same as in validation runs
CENTV_cohort_zero=CENTV_cohort_valid
CENTV_cohort_zero[,1] <- rep(RunType_zero,3)
}
SOF_cohort=rbind(SOF_cohort, CENTV_cohort_valid, CENTV_cohort_zero)
SRFCT1HarvRow <- data.frame(RunYear = i, SheltonStk = "CENTV", Age = 3, TimeStep = 1,
Mort = sum(annual.harv[annual.harv$month %in% c(10:12,1:4),]$H))
SRFCT2HarvRow <- data.frame(RunYear = i, SheltonStk = "CENTV", Age = 3, TimeStep = 2,
Mort = sum(annual.harv[annual.harv$month %in% c(5:6),]$H))
SRFCT3HarvRow <- data.frame(RunYear = i, SheltonStk = "CENTV", Age = 3, TimeStep = 3,
Mort = sum(annual.harv[annual.harv$month %in% c(7:9),]$H))
SOFHarv <- rbind(SOFHarv, SRFCT1HarvRow, SRFCT2HarvRow, SRFCT3HarvRow)
}
rm(SRFC_river_run, annual.harv, monthses, monthly.abundance, step, oct.abund_valid, may.abund_valid, july.abund_valid,
oct.abund_zero, may.abund_zero, july.abund_zero, year, stock, ages, seasons, yearly.abunds_valid, yearly.abunds_zero,
CENTV_cohort_valid, CENTV_cohort_zero, SRFCT1HarvRow, SRFCT2HarvRow, SRFCT3HarvRow)
SheltonStk="NCA"
for (i in years) { # Rogue/Klamath validation run cohorts
KRFC.dat.yr=KRFCDF[KRFCDF$mgmtyr==i,]
#do aggregations one age at a time within each year
for (j in 3:5) {
KRFC.dat.aged=KRFC.dat.yr[KRFC.dat.yr$age==j,]
KRFC.sep=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==9]
KRFC.oct=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==10]
KRFC.may=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==5]
KRFC.july=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==7]
if(j == 3) {
ROPI.sep=ROPIDF$ROPI_3[ROPIDF$Year==i]
}
if(j == 4) {
ROPI.sep=ROPIDF$ROPI_4[ROPIDF$Year==i]
}
if(j == 5) {
ROPI.sep=ROPIDF$ROPI_5[ROPIDF$Year==i]
}
ROPI.oct=ROPI.sep*KRFC.oct/KRFC.sep
ROPI.may=ROPI.sep*KRFC.may/KRFC.sep
ROPI.july=ROPI.sep*KRFC.july/KRFC.sep
oct.abund_valid=KRFC.oct+ROPI.oct
may.abund_valid=KRFC.may+ROPI.may
july.abund_valid=KRFC.july+ROPI.july
RunType=array(RunType_valid,3)
year=array(i,3)
stock=array(SheltonStk,3)
ages=array(j,3)
seasons=c(1:3) #seasons 1-3 correspond to abundances on Oct 1 (of calendar yr = mgmt yr-1), May 1, and July 1 respectively
yearly.abunds_valid=c(oct.abund_valid,may.abund_valid,july.abund_valid)
if(PFMCflag == 1) { # if no PFMC harvest, SOF cohorts will be larger (processed in following loop)
NCA_cohort_valid=cbind(RunType,year,stock,ages,seasons,yearly.abunds_valid)
SOF_cohort=rbind(SOF_cohort,NCA_cohort_valid)
}
if(PFMCflag == 0) { # if zero harvest scenario is for a non-PFMC area, PFMC fisheries will still occur and SOF cohorts will be same as in validation runs
NCA_cohort_valid=cbind(RunType,year,stock,ages,seasons,yearly.abunds_valid)
NCA_cohort_zero=NCA_cohort_valid
NCA_cohort_zero[,1] <- rep(RunType_zero,3)
SOF_cohort=rbind(SOF_cohort,NCA_cohort_valid,NCA_cohort_zero)
}
}
}
rm(KRFC.dat.yr, KRFC.dat.aged, KRFC.sep, KRFC.oct, KRFC.may, KRFC.july, ROPI.sep, ROPI.oct, ROPI.may, ROPI.july,
oct.abund_valid, may.abund_valid, july.abund_valid, RunType, year, stock, ages, seasons, yearly.abunds_valid,
NCA_cohort_valid, NCA_cohort_zero)
for (i in years) { # Rogue/Klamath zero PFMC harvest scenario cohorts
KRFC.dat.yr=KRFCDF[KRFCDF$mgmtyr==i,]
#do aggregations one age at a time within each year
for (j in 3:5){
KRFC.dat.aged=KRFC.dat.yr[KRFC.dat.yr$age==j,]
KRFC.sep=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==9]
if(j == 3){
KRFC.oct=KRFC.sep * (1-.5)^(1/12)
KRFC.may=KRFC.oct * (1-.5)^(7/12)
KRFC.july = KRFC.may * (1-.2)^(2/12)
} else{
KRFC.oct=KRFC.sep * (1-.2)^(1/12)
KRFC.may=KRFC.oct * (1-.2)^(7/12)
KRFC.july = KRFC.may * (1-.2)^(2/12)
}
if(j == 3){
ROPI.sep=ROPIDF$ROPI_3[ROPIDF$Year==i]
} else if(j == 4){
ROPI.sep=ROPIDF$ROPI_4[ROPIDF$Year==i]
} else if(j == 5){
ROPI.sep=ROPIDF$ROPI_5[ROPIDF$Year==i]
}
ROPI.oct=ROPI.sep*KRFC.oct/KRFC.sep
ROPI.may=ROPI.sep*KRFC.may/KRFC.sep
ROPI.july=ROPI.sep*KRFC.july/KRFC.sep
oct.abund_zero=KRFC.oct+ROPI.oct
may.abund_zero=KRFC.may+ROPI.may
july.abund_zero=KRFC.july+ROPI.july
RunType=array(RunType_zero,3)
year=array(i,3)
stock=array(SheltonStk,3)
ages=array(j,3)
seasons=c(1:3) #seasons 1-3 correspond to abundances on Oct 1 (of calendar yr = mgmt yr-1), May 1, and July 1 respectively
yearly.abunds_zero=c(oct.abund_zero,may.abund_zero,july.abund_zero)
if(PFMCflag == 1) { # if no PFMC harvest, SOF cohorts will be larger
NCA_cohort_zero=cbind(RunType,year,stock,ages,seasons,yearly.abunds_zero)
SOF_cohort=rbind(SOF_cohort,NCA_cohort_zero)
}
}
}
rm(KRFC.dat.yr, KRFC.dat.aged, KRFC.sep, KRFC.oct, KRFC.may, KRFC.july, ROPI.sep, ROPI.oct, ROPI.may, ROPI.july,
oct.abund_zero, may.abund_zero, july.abund_zero, RunType, year, stock, ages, seasons, yearly.abunds_zero, NCA_cohort_zero)
#Next we have to calculate ROPI/KRFC harvest...
for (i in years)
{
KRFC.dat.yr=KRFCDF[KRFCDF$mgmtyr==i,]
#do aggregations one age at a time within each year
for (j in 3:5){
#July/Oct/May are needed for time step starts
#September is used for setting up ratios
#Other months are needed to calculating ROPI harvests later (applying KRFC ERs to monthly abundance data)
KRFC.dat.aged=KRFC.dat.yr[KRFC.dat.yr$age==j,]
KRFC.sep=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==9]
KRFC.oct=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==10]
KRFC.may=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==5]
KRFC.jul=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==7]
KRFC.jan=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==1]
KRFC.feb=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==2]
KRFC.mar=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==3]
KRFC.apr=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==4]
KRFC.jun=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==6]
KRFC.aug=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==8]
KRFC.nov=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==11]
KRFC.dec=KRFC.dat.aged$totalpop[KRFC.dat.aged$month==12]
if(j == 3){
ROPI.sep=ROPIDF$ROPI_3[ROPIDF$Year==i]
}
if(j == 4){
ROPI.sep=ROPIDF$ROPI_4[ROPIDF$Year==i]
}
if(j == 5){
ROPI.sep=ROPIDF$ROPI_5[ROPIDF$Year==i]
}
#Harvests in all months, based off KRFC harvest
KRFCharv.yr.age <- KRFCHarvDF[KRFCHarvDF$mgmtyr==i & KRFCHarvDF$age == j,]
ROPI.Harv.oct=ROPI.sep*KRFC.oct/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==10,]$ER[1]
ROPI.Harv.may=ROPI.sep*KRFC.may/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==5,]$ER[1]
ROPI.Harv.jul=ROPI.sep*KRFC.jul/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==7,]$ER[1]
ROPI.Harv.jan=ROPI.sep*KRFC.jan/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==1,]$ER[1]
ROPI.Harv.feb=ROPI.sep*KRFC.feb/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==2,]$ER[1]
ROPI.Harv.mar=ROPI.sep*KRFC.mar/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==3,]$ER[1]
ROPI.Harv.apr=ROPI.sep*KRFC.apr/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==4,]$ER[1]
ROPI.Harv.jun=ROPI.sep*KRFC.jun/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==6,]$ER[1]
ROPI.Harv.aug=ROPI.sep*KRFC.aug/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==8,]$ER[1]
ROPI.Harv.nov=ROPI.sep*KRFC.nov/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==11,]$ER[1]
ROPI.Harv.dec=ROPI.sep*KRFC.dec/KRFC.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==12,]$ER[1]
ROPI.Harv.sep=ROPI.sep * KRFCharv.yr.age[KRFCharv.yr.age$month==9,]$ER[1]
NCAT1HarvRow <- data.frame(RunYear = i, SheltonStk = "NCA", Age = j, TimeStep = 1,
Mort = ROPI.Harv.oct + ROPI.Harv.jan + ROPI.Harv.feb +
ROPI.Harv.mar + ROPI.Harv.apr + ROPI.Harv.nov + ROPI.Harv.dec +
sum(KRFCharv.yr.age[KRFCharv.yr.age$month %in% c(10:12,1:4),]$oceanimpacts))
NCAT2HarvRow <- data.frame(RunYear = i, SheltonStk = "NCA", Age = j, TimeStep = 2,
Mort = ROPI.Harv.may + ROPI.Harv.jun +
sum(KRFCharv.yr.age[KRFCharv.yr.age$month %in% c(5:6),]$oceanimpacts))
NCAT3HarvRow <- data.frame(RunYear = i, SheltonStk = "NCA", Age = j, TimeStep = 3,
Mort = ROPI.Harv.jul + ROPI.Harv.aug + ROPI.Harv.sep +
sum(KRFCharv.yr.age[KRFCharv.yr.age$month %in% c(7:9),]$oceanimpacts))
SOFHarv <- rbind(SOFHarv, NCAT1HarvRow, NCAT2HarvRow, NCAT3HarvRow)
}
}
rm(KRFC.dat.yr, KRFC.dat.aged, KRFC.sep, KRFC.oct, KRFC.nov, KRFC.dec, KRFC.jan, KRFC.feb, KRFC.mar, KRFC.apr,
KRFC.may, KRFC.jun, KRFC.jul, KRFC.aug, ROPI.sep, KRFCharv.yr.age, ROPI.Harv.jan, ROPI.Harv.feb,
ROPI.Harv.mar, ROPI.Harv.apr, ROPI.Harv.may, ROPI.Harv.jun, ROPI.Harv.jul, ROPI.Harv.aug, ROPI.Harv.sep,
ROPI.Harv.oct, ROPI.Harv.nov, ROPI.Harv.dec, NCAT1HarvRow, NCAT2HarvRow, NCAT3HarvRow)
##########---------- Main Processing ----------##########
# Add run type & year, combine cohort tables, remove age 2 and time-step 4, convert to 39 stock format, append non-FRAM stocks
Cohort_1$RunType <- RunType_valid
Cohort_2$RunType <- RunType_zero
Cohort <- rbind(Cohort_1,Cohort_2)
Cohort <- Cohort[Cohort$Age > 2 & Cohort$TimeStep < 4, ]
if(ExcSac == 1) {Cohort <- Cohort[!(Cohort$StockID %in% c(69,70)), ]} # This removes SacFall
Cohort <- merge(Cohort,RunIDs)
Cohort$StockID <- ceiling(Cohort$StockID / 2)
Cohort <- merge(Cohort,StockDF)
Cohort <- summaryBy(StartCohort~RunType+RunYear+SheltonStk+Age+TimeStep,
data = Cohort, FUN = sum, keep.names = TRUE)
rm(Cohort_1,Cohort_2)
Cohort <- rbind(Cohort,SOF_cohort,UCOLSPR_cohort)
Cohort$StartCohort <- as.numeric(Cohort$StartCohort)
Cohort <- summaryBy(StartCohort~RunType+RunYear+SheltonStk+TimeStep,
data = Cohort, FUN = sum, keep.names = TRUE)
# Merge cohort data with Shelton distribution parameters and apportion into regions
Cohort <- merge(Cohort,SheltonDistsDF)
Cohort$preFish.Salish <- Cohort$StartCohort * Cohort$SALISH
Cohort$preFish.NOF <- Cohort$StartCohort * Cohort$NOF
Cohort$preFish.OR <- Cohort$StartCohort * Cohort$OR
Cohort$preFish.Cali <- Cohort$StartCohort * Cohort$CALI
Cohort$preFish.North <- Cohort$StartCohort * Cohort$NORTH
Cohort$preFish.SWWCVI <- Cohort$StartCohort * Cohort$SWWCVI
# Add run type & year, combine mort tables, remove age 2 and time-step 4, convert to 39 stock format
Mort_1$RunType <- RunType_valid
Mort_2$RunType <- RunType_zero
Mort <- rbind(Mort_1,Mort_2)
Mort <- Mort[Mort$Age > 2 & Mort$TimeStep < 4, ]
if(ExcSac == 1) {Mort <- Mort[!(Mort$StockID %in% c(69,70)), ]} # This removes SacFall
Mort <- merge(Mort,RunIDs)
Mort$StockID <- ceiling(Mort$StockID / 2)
Mort$Mort <- rowSums(Mort[ ,c(8:11,13:16)])
Mort <- merge(Mort,StockDF)
Mort <- summaryBy(Mort~RunType+RunYear+SheltonStk+Age+FisheryID+TimeStep,
data = Mort, FUN = sum, keep.names = TRUE)
rm(Mort_1,Mort_2)
# Add fishery flag and region for hybrid approach
FisheryRegion <- FisheryRegion[ ,c(1:2,5:6)]
Mort <- merge(Mort,FisheryRegion)
# Pull out mort records for adhoc style processing, add SOF morts, summarize, and allocate to regions
Mort_adHocStyle <- summaryBy(Mort~RunType+RunYear+SheltonStk+TimeStep,
data = Mort[Mort$Mort_Dist_Type == 1, ], FUN = sum, keep.names = TRUE)
# Add SOF morts to adhoc style morts
SOFHarv <- summaryBy(Mort~RunYear+SheltonStk+TimeStep,
data = SOFHarv, FUN = sum, keep.names = TRUE) # summing across ages
if(PFMCflag == 1) { # if no harvest scenario is zero PFMC, only add SOF morts to validation
SOFHarv_valid <- SOFHarv
SOFHarv_valid$RunType <- rep(RunType_valid,dim(SOFHarv)[1])
SOFHarv_valid <- SOFHarv_valid[ ,c(5,1:4)]
Mort_adHocStyle <- rbind(Mort_adHocStyle,SOFHarv_valid)
}
if(PFMCflag == 0) { # if no harvest scenario is for a non-PFMC area, add SOF morts to validation and zero runs
SOFHarv_valid <- SOFHarv
SOFHarv_valid$RunType <- rep(RunType_valid,dim(SOFHarv)[1])
SOFHarv_valid <- SOFHarv_valid[ ,c(5,1:4)]
SOFHarv_zero <- SOFHarv
SOFHarv_zero$RunType <- rep(RunType_zero,dim(SOFHarv)[1])
SOFHarv_zero <- SOFHarv_zero[ ,c(5,1:4)]
Mort_adHocStyle <- rbind(Mort_adHocStyle,SOFHarv_valid,SOFHarv_zero)
}
# Merge with Shelton distribution parameters and apportion to regions, reformat
colnames(SheltonDistsDF)[1:2] <- c("SheltonStk","TimeStep")
Mort_adHocStyle <- merge(Mort_adHocStyle,SheltonDistsDF)
Mort_adHocStyle$mort.Salish <- Mort_adHocStyle$Mort * Mort_adHocStyle$SALISH
Mort_adHocStyle$mort.NOF <- Mort_adHocStyle$Mort * Mort_adHocStyle$NOF
Mort_adHocStyle$mort.OR <- Mort_adHocStyle$Mort * Mort_adHocStyle$OR
Mort_adHocStyle$mort.Cali <- Mort_adHocStyle$Mort * Mort_adHocStyle$CALI
Mort_adHocStyle$mort.North <- Mort_adHocStyle$Mort * Mort_adHocStyle$NORTH
Mort_adHocStyle$mort.SWWCVI <- Mort_adHocStyle$Mort * Mort_adHocStyle$SWWCVI
Mort_adHocStyle <- Mort_adHocStyle[ ,c(3:4,1:2,5,12:17)]
Mort_adHocStyle <- Mort_adHocStyle %>%
gather(Region,Mort,c(6:11))
# Pull out morts that will be distributed based on fishery location, summarize, and allocate to regions
if(dim(Mort[Mort$Mort_Dist_Type == 2, ])[1] > 0) {
# Non-WCVI mortalities
Mort_hybridStyle <- summaryBy(Mort~RunType+RunYear+SheltonStk+TimeStep+Region,
data = Mort[Mort$Mort_Dist_Type == 2, ], FUN = sum, keep.names = TRUE)
}
# Combine adhocStyle and hybridStyle mort tables
if(sum(unique(Mort[ ,8])) == 1) {Mort <- Mort_adHocStyle}
if(sum(unique(Mort[ ,8])) == 3) {Mort <- rbind(Mort_adHocStyle,Mort_hybridStyle)}
# Summarize and reformat mortalities
Mort <- summaryBy(Mort~RunType+RunYear+SheltonStk+TimeStep+Region,
data = Mort, FUN = sum, keep.names = TRUE)
Mort <- Mort %>%
spread(Region, Mort, c(1:4))
Mort <- Mort[ ,c(1:4,9,6,8,5,7,10)]
# Merge cohort data with mortality data
Cohort <- merge(Cohort, Mort, all.x = TRUE)
Cohort[is.na(Cohort)] <- 0
# Cohort$PostFisheryAbund <- Cohort$StartCohort - Cohort$Mort
# Calculate post-fishery abundances
Cohort$postFish.Salish <- Cohort$preFish.Salish - Cohort$mort.Salish
Cohort$postFish.NOF <- Cohort$preFish.NOF - Cohort$mort.NOF
Cohort$postFish.OR <- Cohort$preFish.OR - Cohort$mort.OR
Cohort$postFish.Cali <- Cohort$preFish.Cali - Cohort$mort.Cali
Cohort$postFish.North <- Cohort$preFish.North - (Cohort$mort.North)
Cohort$postFish.SWWCVI <- Cohort$preFish.SWWCVI - Cohort$mort.SWWCVI
# sum mortality and post-fishery totals across regions, rearrange
Cohort$Mort <- rowSums(Cohort[ ,c(18:22)])
Cohort$PostFisheryAbund <- rowSums(Cohort[ ,c(24:28)])
Cohort <- Cohort[order(Cohort$RunType, Cohort$RunYear, Cohort$SheltonStk, Cohort$TimeStep), c(3:4,1:2,5,30:31,12:29)]
write.csv(Cohort, paste(outfile,RunType_zero,"_4.19.21.csv",sep = ""))
# # Merge with Shelton distributions and apportion abundances
# Cohort <- merge(Cohort,SheltonDistsDF)
#
# Cohort$preFish.Salish <- Cohort$StartCohort * Cohort$SALISH
# Cohort$preFish.NOF <- Cohort$StartCohort * Cohort$NOF
# Cohort$preFish.OR <- Cohort$StartCohort * Cohort$OR
# Cohort$preFish.Cali <- Cohort$StartCohort * Cohort$CALI
# Cohort$preFish.North <- Cohort$StartCohort * Cohort$NORTH
# Cohort$preFish.SWWCVI <- Cohort$StartCohort * Cohort$SWWCVI
#
# Cohort$mort.Salish <- Cohort$Mort * Cohort$SALISH
# Cohort$mort.NOF <- Cohort$Mort * Cohort$NOF
# Cohort$mort.OR <- Cohort$Mort * Cohort$OR
# Cohort$mort.Cali <- Cohort$Mort * Cohort$CALI
# Cohort$mort.North <- Cohort$Mort * Cohort$NORTH
# Cohort$mort.SWWCVI <- Cohort$Mort * Cohort$SWWCVI
#
# Cohort$postFish.Salish <- Cohort$PostFisheryAbund * Cohort$SALISH
# Cohort$postFish.NOF <- Cohort$PostFisheryAbund * Cohort$NOF
# Cohort$postFish.OR <- Cohort$PostFisheryAbund * Cohort$OR
# Cohort$postFish.Cali <- Cohort$PostFisheryAbund * Cohort$CALI
# Cohort$postFish.North <- Cohort$PostFisheryAbund * Cohort$NORTH
# Cohort$postFish.SWWCVI <- Cohort$PostFisheryAbund * Cohort$SWWCVI
# Cohort <- Cohort[order(Cohort$RunType, Cohort$RunYear, Cohort$SheltonStk, Cohort$TimeStep), c(3:4,1,5,2,6:8,15:32)]
#
# write.csv(Cohort, paste(outfile,"ZeroPS_adhocStyle.csv",sep = ""))
# PreFisheryAbundance <- summaryBy(preFish.Salish+preFish.NOF+preFish.OR+preFish.Cali+preFish.North+preFish.SWWCVI~RunType+RunYear+TimeStep,
#                                  data = Cohort, FUN = sum, keep.names = TRUE)
# write.csv(PreFisheryAbundance, paste(outfile,RunType_zero,"_PreFisheryAbund.csv",sep = ""))
#
# PostFisheryAbundance <- summaryBy(postFish.Salish+postFish.NOF+postFish.OR+postFish.Cali+postFish.North+postFish.SWWCVI~RunType+RunYear+TimeStep,
#                                  data = Cohort, FUN = sum, keep.names = TRUE)
# write.csv(PostFisheryAbundance, paste(outfile,RunType_zero,"_PostFisheryAbund.csv",sep = ""))
