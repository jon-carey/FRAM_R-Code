# Set path to file that identifies North->South geographic ordering for Figure 3.21
StkGeoOrder <- read.csv(paste(Infile, "StkGeoOrder.csv", sep = ""), header = TRUE)
# Set up empty data frame
MasterDat <- as.data.frame(array(NA, c(0,6)))
colnames(MasterDat) <- c("CLB", "Stock", "Fc.Type", "Year", "Agency", "Model")
i=1
for(i in 1:dim(filelist)[1]) {
# For all years except current year...
# (this provides the agency and model forecasts for given year)
if(i < dim(filelist)[1]) {
path <- paste(Infile, filelist[i,1], sep = "")
# Read in CkeckCLB.out file for given year
dat <- readLines(path)
# Identify calibration ID
calib <- substr(filelist[i,1],1,5)
# assign(substr(filelist[i,1],1,4), get("dat"))
# Determine year of calibration
if(substr(filelist[i,1],1,1) == "9") {
EndYear <- as.numeric(paste("19",substr(filelist[i,1],1,2), sep = ""))
}
if(substr(filelist[i,1],1,1) != "9") {
EndYear <- as.numeric(paste("20",substr(filelist[i,1],1,2), sep = ""))
}
# assign(paste("EndYr_", substr(filelist[i,1],1,4), sep = ""), get("EndYear"))
# Identify line numbers that correspond with beginning and end of TRS and ESC sections
esc_nd <- c()
for(h in 1:length(dat)) {
if(dat[h] == "TERMINAL RUN COMPARISONS") {
trs_strt <- h
}
if(dat[h] == "ESCAPEMENT COMPARISONS") {
trs_nd <- h
esc_strt <- h
}
if(dat[h] == "MATURATION RATE COMPARISONS" | dat[h] == "Stock EV COMPARISONS") {
esc_nd[length(esc_nd) + 1] <- h
}
}
# Extract TRS and ESC sections from CheckCLB.out file
TRS <- as.data.frame(dat[c(trs_strt:trs_nd)])
ESC <- as.data.frame(dat[c(esc_strt:esc_nd[1])])
# Identify line numbers in TRS that correspond to the start of each new stock section
TRS_startlines <- c()
j=1
for(j in 1:dim(TRS)[1]) {
if(substr(TRS[j,1],1,28) == "TERMINAL RUN CALIBRATION FOR") {
TRS_startlines[length(TRS_startlines) + 1] <- j
}
}
# Pull out annual data for each stock; reformat and parse into columns
k=1
for(k in 1:length(TRS_startlines)) {
if(k < length(TRS_startlines)) {
stkdat <- TRS[c(TRS_startlines[k]:(TRS_startlines[k+1]-1)), ]
}
if(k == length(TRS_startlines)) {
stkdat <- TRS[c(TRS_startlines[k]:dim(TRS)[1]), ]
}
l=1
for(l in 1:length(stkdat)) {
if(substr(rm_white(stkdat[l]),1,4) == as.character(EndYear)) {
strt <- l
}
if(substr(rm_white(stkdat[l]),1,4) == as.character(EndYear)) {
nd <- l
}
}
# Pull out annual data in text strings
stkdat <- stkdat[c(strt:nd)]
# Reformat and parse into columns
stkdat <- str_replace_all(stkdat, "\\|", "\\ ")
stkdat <- str_replace_all(stkdat, "\\-", "\\ ")
stkdat <- rm_white(stkdat)
stkdat <- colsplit(stkdat, split = "\\ ", names = c("Year", "Agency", "Mod", "Comp"))
stkdat <- stkdat[ ,c(1:3)]
# Add column for Calibration ID
stkdat$CLB <- rep(calib, times = dim(stkdat)[1])
# Add column for stock acronym
stkdat$Stock <- rep(substr(TRS[TRS_startlines[k],1],30, nchar(as.character(TRS[TRS_startlines[k],1]))),
times = dim(stkdat)[1])
# Add column for forecast type (TRS or ESC)
stkdat$Fc.Type <- rep("TRS", times = dim(stkdat)[1])
stkdat <- stkdat[ ,c(4,6,5,1:3)]
# Append to master file
MasterDat <- rbind(MasterDat, stkdat)
}
# Identify line numbers in ESC that correspond to the start of each new stock section
ESC_startlines <- c()
m=1
for(m in 1:dim(ESC)[1]) {
if(substr(ESC[m,1],1,26) == "ESCAPEMENT CALIBRATION FOR") {
ESC_startlines[length(ESC_startlines) + 1] <- m
}
}
# Pull out annual data for each stock; reformat and parse into columns
n=1
for(n in 1:length(ESC_startlines)) {
if(n < length(ESC_startlines)) {
stkdat <- ESC[c(ESC_startlines[n]:(ESC_startlines[n+1]-1)), ]
}
if(n == length(ESC_startlines)) {
stkdat <- ESC[c(ESC_startlines[n]:dim(ESC)[1]), ]
}
o=1
for(o in 1:length(stkdat)) {
if(substr(rm_white(stkdat[o]),1,4) == as.character(EndYear)) {
strt <- o
}
if(substr(rm_white(stkdat[o]),1,4) == as.character(EndYear)) {
nd <- o
}
}
# Pull out annual data in text strings
stkdat <- stkdat[c(strt:nd)]
# Reformat and parse into columns
stkdat <- str_replace_all(stkdat, "\\|", "\\ ")
stkdat <- str_replace_all(stkdat, "\\-", "\\ ")
stkdat <- rm_white(stkdat)
stkdat <- colsplit(stkdat, split = "\\ ", names = c("Year", "Agency", "Mod", "Comp"))
stkdat <- stkdat[ ,c(1:3)]
# Add column for Calibration ID
stkdat$CLB <- rep(calib, times = dim(stkdat)[1])
# Add column for stock acronym
stkdat$Stock <- rep(substr(ESC[ESC_startlines[n],1],28, nchar(as.character(ESC[ESC_startlines[n],1]))),
times = dim(stkdat)[1])
# Add column for forecast type (TRS or ESC)
stkdat$Fc.Type <- rep("ESC", times = dim(stkdat)[1])
stkdat <- stkdat[ ,c(4,6,5,1:3)]
# Append to master file
MasterDat <- rbind(MasterDat, stkdat)
}
}
# For the current year...
# (this provides the actual returns for all previous years)
if(i == dim(filelist)[1]) {
path <- paste(Infile, filelist[i,1], sep = "")
# Read in CkeckCLB.out file for given year
dat <- readLines(path)
# Identify calibration ID
calib <- substr(filelist[i,1],1,5)
# assign(substr(filelist[i,1],1,4), get("dat"))
# Determine year of calibration
if(substr(filelist[i,1],1,1) == "9") {
EndYear <- as.numeric(paste("19",substr(filelist[i,1],1,2), sep = ""))
}
if(substr(filelist[i,1],1,1) != "9") {
EndYear <- as.numeric(paste("20",substr(filelist[i,1],1,2), sep = ""))
}
# assign(paste("EndYr_", substr(filelist[i,1],1,4), sep = ""), get("EndYear"))
# Identify line numbers that correspond with beginning and end of TRS and ESC sections
esc_nd <- c()
for(h in 1:length(dat)) {
if(dat[h] == "TERMINAL RUN COMPARISONS") {
trs_strt <- h
}
if(dat[h] == "ESCAPEMENT COMPARISONS") {
trs_nd <- h
esc_strt <- h
}
if(dat[h] == "MATURATION RATE COMPARISONS" | dat[h] == "Stock EV COMPARISONS") {
esc_nd[length(esc_nd) + 1] <- h
}
}
# Extract TRS and ESC sections from CheckCLB.out file
TRS <- as.data.frame(dat[c(trs_strt:trs_nd)])
ESC <- as.data.frame(dat[c(esc_strt:esc_nd[1])])
# Identify line numbers in TRS that correspond to the start of each new stock section
TRS_startlines <- c()
j=1
for(j in 1:dim(TRS)[1]) {
if(substr(TRS[j,1],1,28) == "TERMINAL RUN CALIBRATION FOR") {
TRS_startlines[length(TRS_startlines) + 1] <- j
}
}
# Pull out annual data for each stock; reformat and parse into columns
k=1
for(k in 1:length(TRS_startlines)) {
if(k < length(TRS_startlines)) {
stkdat <- TRS[c(TRS_startlines[k]:(TRS_startlines[k+1]-1)), ]
}
if(k == length(TRS_startlines)) {
stkdat <- TRS[c(TRS_startlines[k]:dim(TRS)[1]), ]
}
l=1
for(l in 1:length(stkdat)) {
if(substr(rm_white(stkdat[l]),1,4) == as.character(StartYear)) {
strt <- l
}
if(substr(rm_white(stkdat[l]),1,4) == as.character(EndYear)) {
nd <- l
}
}
# Pull out annual data in text strings
stkdat <- stkdat[c(strt:nd)]
# Reformat and parse into columns
stkdat <- str_replace_all(stkdat, "\\|", "\\ ")
stkdat <- str_replace_all(stkdat, "\\-", "\\ ")
stkdat <- rm_white(stkdat)
stkdat <- colsplit(stkdat, split = "\\ ", names = c("Year", "Agency", "Mod", "Comp"))
stkdat <- stkdat[ ,c(1:3)]
# Add column for Calibration ID
stkdat$CLB <- rep(calib, times = dim(stkdat)[1])
# Add column for stock acronym
stkdat$Stock <- rep(substr(TRS[TRS_startlines[k],1],30, nchar(as.character(TRS[TRS_startlines[k],1]))),
times = dim(stkdat)[1])
# Add column for forecast type (TRS or ESC)
stkdat$Fc.Type <- rep("TRS", times = dim(stkdat)[1])
stkdat <- stkdat[ ,c(4,6,5,1:3)]
# Append to master file
MasterDat <- rbind(MasterDat, stkdat)
}
# Identify line numbers in ESC that correspond to the start of each new stock section
ESC_startlines <- c()
m=1
for(m in 1:dim(ESC)[1]) {
if(substr(ESC[m,1],1,26) == "ESCAPEMENT CALIBRATION FOR") {
ESC_startlines[length(ESC_startlines) + 1] <- m
}
}
# Pull out annual data for each stock; reformat and parse into columns
n=1
for(n in 1:length(ESC_startlines)) {
if(n < length(ESC_startlines)) {
stkdat <- ESC[c(ESC_startlines[n]:(ESC_startlines[n+1]-1)), ]
}
if(n == length(ESC_startlines)) {
stkdat <- ESC[c(ESC_startlines[n]:dim(ESC)[1]), ]
}
o=1
for(o in 1:length(stkdat)) {
if(substr(rm_white(stkdat[o]),1,4) == as.character(StartYear)) {
strt <- o
}
if(substr(rm_white(stkdat[o]),1,4) == as.character(EndYear)) {
nd <- o
}
}
# Pull out annual data in text strings
stkdat <- stkdat[c(strt:nd)]
# Reformat and parse into columns
stkdat <- str_replace_all(stkdat, "\\|", "\\ ")
stkdat <- str_replace_all(stkdat, "\\-", "\\ ")
stkdat <- rm_white(stkdat)
stkdat <- colsplit(stkdat, split = "\\ ", names = c("Year", "Agency", "Mod", "Comp"))
stkdat <- stkdat[ ,c(1:3)]
# Add column for Calibration ID
stkdat$CLB <- rep(calib, times = dim(stkdat)[1])
# Add column for stock acronym
stkdat$Stock <- rep(substr(ESC[ESC_startlines[n],1],28, nchar(as.character(ESC[ESC_startlines[n],1]))),
times = dim(stkdat)[1])
# Add column for forecast type (TRS or ESC)
stkdat$Fc.Type <- rep("ESC", times = dim(stkdat)[1])
stkdat <- stkdat[ ,c(4,6,5,1:3)]
# Append to master file
MasterDat <- rbind(MasterDat, stkdat)
}
}
}
# No need to retain this
write.csv(MasterDat, file = paste(Outfile, "Rout.csv", sep = ""), row.names = FALSE)
# dim(filelist)[1]
# Get list of Calibration IDs
CLBlist <- substr(filelist[c(1:dim(filelist)[1]), ],1,5)
# Pull Agency and Model forecast data from previous year calibrations
# (these are the Agency and Model forecasts from each year)
MasterFile <- MasterDat[MasterDat$CLB %in% CLBlist[1:length(CLBlist)-1], ]
# Pull actual returns from previous years in current calibration ID
# (these are the actual post-season returns)
ActRet <- MasterDat[MasterDat$CLB %in% CLBlist[length(CLBlist)], c(3:5)]
ActRet <- ActRet[ActRet$Year < EndYear, ]
colnames(ActRet)[3] <- "Actual"
# Combine forecasts with post-season returns
MasterFile <- merge(MasterFile,ActRet, all = TRUE)
# Remove stoks without a full time series
chk <- summaryBy(Year~Stock, data = MasterFile, FUN = length)
numYr <- EndYear - StartYear
chk <- chk[chk$Year.length == numYr, ]
MasterFile <- MasterFile[MasterFile$Stock %in% c(chk$Stock), ]
# Add field for forecast that was used (if agency forecast existed (>0) use that,
# if not, use model forecast)
# Also include symbol ID and color designation for whether Agency or Model fc was used
i=1
for(i in 1:dim(MasterFile)[1]) {
ifelse(MasterFile$Agency[i] > 0, MasterFile$Used[i] <- MasterFile$Agency[i],
MasterFile$Used[i] <- MasterFile$Mod[i])
MasterFile$sym[i] <- 21
ifelse(MasterFile$Agency[i] > 0, MasterFile$kel[i] <- "black",
MasterFile$kel[i] <- "white")
}
# Add field for point size based on average return
# WARNING: methods 2-4 were exploratory and may not be fully developed...
if(ScaleMethod == 1) { # categorical scale by average return over entire time series
ptsz <- summaryBy(Actual~Stock,data = MasterFile, FUN = mean)
i=1
for(i in 1:dim(ptsz)[1]) {
if(ptsz$Actual.mean[i] >= 100000) {ptsz$ptsz[i] <- 4}
if(ptsz$Actual.mean[i] < 100000) {ptsz$ptsz[i] <- 3}
if(ptsz$Actual.mean[i] < 50000) {ptsz$ptsz[i] <- 2}
if(ptsz$Actual.mean[i] < 10000) {ptsz$ptsz[i] <- 1}
}
ptsz <- ptsz[ ,c(1,3)]
MasterFile <- merge(MasterFile, ptsz)
}
if(ScaleMethod == 2) { # categorical scale by annual return value
i=1
for(i in 1:dim(MasterFile)[1]) {
if(MasterFile$Actual[i] >= 100000) {MasterFile$ptsz[i] <- 4}
if(MasterFile$Actual[i] < 100000) {MasterFile$ptsz[i] <- 3}
if(MasterFile$Actual[i] < 50000) {MasterFile$ptsz[i] <- 2}
if(MasterFile$Actual[i] < 10000) {MasterFile$ptsz[i] <- 1}
}
}
if(ScaleMethod == 3) { # categorical scale by size of deviation (actual - forecast)
i=1
for(i in 1:dim(MasterFile)[1]) {
if(abs(MasterFile$Actual[i] - MasterFile$Used[i]) >= 50000) {MasterFile$ptsz[i] <- 4}
if(abs(MasterFile$Actual[i] - MasterFile$Used[i]) < 50000) {MasterFile$ptsz[i] <- 3}
if(abs(MasterFile$Actual[i] - MasterFile$Used[i]) < 5000) {MasterFile$ptsz[i] <- 2}
if(abs(MasterFile$Actual[i] - MasterFile$Used[i]) < 500) {MasterFile$ptsz[i] <- 1}
}
}
if(ScaleMethod == 4) { # continuous scale by size of annual return
StkSizeDat <- summaryBy(Actual~Year, data = MasterFile, FUN = c(quantile(probs = c(.10, .50, .90))))
i=14
for(i in 1:dim(MasterFile)[1]) {
yr <- MasterFile$Year[i]
yr_1st <- StkSizeDat[StkSizeDat$Year == yr, 3]
yr_3rd <- StkSizeDat[StkSizeDat$Year == yr, 5]
MasterFile$ptsz[i] <- ((MasterFile$Actual[i] - yr_1st) * 3 / (yr_3rd - yr_1st)) + 1.0
if(MasterFile$ptsz[i] < 1.0) {MasterFile$ptsz[i]  <-  1.0}
if(MasterFile$ptsz[i] > 4.0) {MasterFile$ptsz[i]  <-  4.0}
}
}
#################################
# Generate table for Appendix J #
#################################
# Pull necessary data from existing file
AppJ <- MasterFile[ , c(3, 1, 2, 6, 5, 7)]
# Get 2017 forecasts and combine with above
AppJ2 <- MasterDat[MasterDat$Year == EndYear, ]
AppJ2 <- AppJ2[ ,c(1,3,4,6,5)]
AppJ2$Actual <- rep(NA, times = dim(AppJ2)[1])
AppJ <- rbind(AppJ, AppJ2)
# Combine BON and CWF (if model = old)
if(modelBP == "old") {
AppJ_BON.CWF <- AppJ[AppJ$Stock %in% c("BON","CWF"), ]
AppJ_BONCWF <- summaryBy(Mod+Agency+Actual ~ Year, data = AppJ_BON.CWF, FUN = sum)
AppJ_BONCWF$Stock <- rep("BON+CWF", times = dim(AppJ_BONCWF)[1])
AppJ_BONCWF$CLB <- AppJ_BON.CWF[AppJ_BON.CWF$Stock == "BON", 1]
AppJ_BONCWF <- AppJ_BONCWF[ ,c(6,5,1:4)]
colnames(AppJ_BONCWF) <- colnames(AppJ)
AppJ <- rbind(AppJ, AppJ_BONCWF)
AppJ <- AppJ[!(AppJ$Stock %in% c("BON","CWF")), ]
# Add in data from earlier years where BON and CWF were combined
MasterDat_BON.CWF <- MasterDat[MasterDat$Stock == "BON+CWF", ]
i=1
for(i in 1:dim(MasterDat_BON.CWF)[1]) {
AppJ[AppJ$Stock == MasterDat_BON.CWF$Stock[i] & AppJ$Year == MasterDat_BON.CWF$Year[i], 1] <- MasterDat_BON.CWF$CLB[i]
AppJ[AppJ$Stock == MasterDat_BON.CWF$Stock[i] & AppJ$Year == MasterDat_BON.CWF$Year[i], 4] <- MasterDat_BON.CWF$Mod[i]
AppJ[AppJ$Stock == MasterDat_BON.CWF$Stock[i] & AppJ$Year == MasterDat_BON.CWF$Year[i], 5] <- MasterDat_BON.CWF$Agency[i]
}
}
# Calculate necessary ratios
AppJ$Agency[AppJ$Agency == 0] <- NA
AppJ$Model.Agency <- AppJ$Mod/AppJ$Agency
AppJ$Agency.Actual <- AppJ$Agency/AppJ$Actual
AppJ$Model.Actual <- AppJ$Mod/AppJ$Actual
# Calculate ratio means for each stock and combine with main file
Means <- summaryBy(Model.Agency+Agency.Actual+Model.Actual ~ Stock, data = AppJ, FUN = mean, na.rm = TRUE)
Means$CLB <- rep(NA, times = dim(Means)[1])
Means$Mod <- rep(NA, times = dim(Means)[1])
Means$Agency <- rep(NA, times = dim(Means)[1])
Means$Actual <- rep(NA, times = dim(Means)[1])
Means$Year <- rep("AVG", times = dim(Means)[1])
Means <- Means[ ,c(5,1,9,6:8,2:4)]
colnames(Means) <- colnames(AppJ)
AppJ <- rbind(AppJ, Means)
# Add in geographic ordering and reorder
AppJ <- merge(AppJ, StkGeoOrder, by.x = "Stock", by.y = "Stk", all.x = TRUE)
AppJ <- AppJ[with(AppJ, order(Level, Year)), ]
AppJ <- AppJ[ ,c(1,3:9,2,10)]
AppJ2 <- AppJ
AppJ2$Mod <- prettyNum(AppJ2$Mod, big.mark = ",")
AppJ2$Agency <- prettyNum(AppJ2$Agency, big.mark = ",")
AppJ2$Actual <- prettyNum(AppJ2$Actual, big.mark = ",")
AppJ2$Model.Agency <- paste(round(AppJ2$Model.Agency * 100,0), "%", sep="")
AppJ2$Agency.Actual <- paste(round(AppJ2$Agency.Actual * 100,0), "%", sep="")
AppJ2$Model.Actual <- paste(round(AppJ2$Model.Actual * 100,0), "%", sep="")
AppJ2$Model.Agency <- gsub("NA%", NA, AppJ2$Model.Agency)
AppJ2$Agency.Actual <- gsub("NA%", NA, AppJ2$Agency.Actual)
AppJ2$Model.Actual <- gsub("NA%", NA, AppJ2$Model.Actual)
AppJ2$Model.Agency <- gsub("NaN%", NA, AppJ2$Model.Agency)
AppJ2$Agency.Actual <- gsub("NaN%", NA, AppJ2$Agency.Actual)
AppJ2$Model.Actual <- gsub("NaN%", NA, AppJ2$Model.Actual)
# Save file
write.csv(AppJ2, file = paste(Outfile, "Appendix_J.csv", sep = ""), row.names = FALSE)
RunSizeDefs <- MasterFile[ ,c(1,4)]
unique(RunSizeDefs)
######################################################
# Create Forecast Error Figures for CLB & ERA Report #
######################################################
levels(MasterFile$Stock) <- unique(MasterFile$Stock)
#...................................................................................
# FC FIGS PART 1: Figure 3.20, Stock-by-stock FC performance (FC/Actual) plots;
# black symbols correspond to agency-supplied forecasts, white symbols is model FC
#...................................................................................
if(CreatePDF == 1) {
pdf(file=paste(Outfile,"Stock-by-Stock_", clb, ".pdf",sep=""),height=7,width=10)
i <- 1
ymin <- 0 #  ***  CHANGE Y AXIS MIN AS NEEDED/DESIRED
# ymax <- 2.5 #  ***  CHANGE Y AXIS MAX AS NEEDED/DESIRED
num.stocks <- 28 #  ***  Model stocks = 30, but there are 2 cases of forecasts generated for a combined stock
par(mfrow=c(3,5))
while(i<=num.stocks) {
stknam<-levels(MasterFile$Stock)[i]
y<-1/(MasterFile$Actual[MasterFile$Stock==stknam]/MasterFile$Used[MasterFile$Stock==stknam])
x<-MasterFile$Year[MasterFile$Stock==stknam]
colx<-as.character(MasterFile$kel[MasterFile$Stock==stknam])
plot(x,y,pch="",bg="black",las=2,xlab="",ylab="Forecast/Actual",ylim=c(ymin,max(max(y,na.rm=T),2)),
cex=2,main=stknam)
points(x,y,pch=MasterFile$sym[MasterFile$Stock==stknam],bg=colx,cex=2)
abline(h=1,lty="dashed")
box(lwd=2)
i = i+1
}
dev.off()
}
if(CreatePNG == 1) {
stks <- data.frame(c(1,16),c(15,28))
for(k in 1:dim(stks)[1]) {
png(file=paste(Outfile,"Stock-by-Stock_" clb, "_", k,".png",sep=""),width=10,height=7,units="in",res=400)
i <- stks[k,1]
ymin <- 0 #  ***  CHANGE Y AXIS MIN AS NEEDED/DESIRED
# ymax <- 2.5 #  ***  CHANGE Y AXIS MAX AS NEEDED/DESIRED
num.stocks <- stks[k,2] #  ***  Model stocks = 30, but there are 2 cases of forecasts generated for a combined stock
par(mfrow=c(3,5))
while(i<=num.stocks) {
stknam<-levels(MasterFile$Stock)[i]
y<-1/(MasterFile$Actual[MasterFile$Stock==stknam]/MasterFile$Used[MasterFile$Stock==stknam])
x<-MasterFile$Year[MasterFile$Stock==stknam]
colx<-as.character(MasterFile$kel[MasterFile$Stock==stknam])
plot(x,y,pch="",bg="black",las=2,xlab="",ylab="Forecast/Actual",ylim=c(ymin,max(max(y,na.rm=T),2)),
cex=2,main=stknam)
points(x,y,pch=MasterFile$sym[MasterFile$Stock==stknam],bg=colx,cex=2)
abline(h=1,lty="dashed")
box(lwd=2)
i = i+1
}
dev.off()
}
}
#...................................................................................
# FC FIGS PART 2: All Stocks, Year-by-Year FC performance (FC/Actual) plots;
# black symbols correspond to agency-supplied forecasts, white symbols is model FC
#...................................................................................
# Add in geographic ordering and reorder
MasterFile <- merge(MasterFile, StkGeoOrder, by.x = "Stock", by.y = "Stk", all.x = TRUE)
MasterFile <- MasterFile[with(MasterFile, order(Level, Year)), ]
if(CreatePDF == 1) {
pdf(file=paste(Outfile,"Performance-by-Year_", clb, ".pdf",sep=""),height=7,width=10)
yr <- StartYear #  ***   CHANGE START YEAR AS NEEDED/DESIRED
yr_max <- EndYear-1 #  ***   CHANGE END YEAR AS NEEDED/DESIRED
ymin <- 0 #  ***   CHANGE Y AXIS MIN AS NEEDED/DESIRED
# ymax <- 3 #  ***   CHANGE Y AXIS MAX AS NEEDED/DESIRED
par(mfrow=c(3,2))
while(yr<=yr_max) {
y<-1/(MasterFile$Actual[MasterFile$Year==yr]/MasterFile$Used[MasterFile$Year==yr])
colx<-as.character(MasterFile$kel[MasterFile$Year==yr])
cexx<-MasterFile$ptsz[MasterFile$Year==yr]
x<-c(1:num.stocks)#levels(MasterFile$Stock[MasterFile$Year==yr])
plot(x,y,pch="",xlab="",xaxt="n",ylab="Forecast/Actual",cex=2,main=yr,ylim=c(ymin,max(max(y,na.rm=TRUE),2.5)))
abline(h=1,lty="dashed")
axis(1,cex.axis=1,lwd=2,at=c(1:num.stocks),labels=as.character(MasterFile$Stock[MasterFile$Year==yr]),las=2)
box(lwd=2)
points(x,y,pch=MasterFile$sym[MasterFile$Year==yr],bg=colx,cex=cexx)
yr = yr+1
}
dev.off()
}
if(CreatePNG == 1) {
FigYearStart <- EndYear-1
for(i in FigYearStart:(EndYear-1)) {
png(file=paste(Outfile,"Performance-by-Year_",i,".png",sep=""),width=7,height=3.5,units="in",res=400)
yr=i #  ***   CHANGE START YEAR AS NEEDED/DESIRED
yr_max=EndYear-1 #  ***   CHANGE END YEAR AS NEEDED/DESIRED
ymin <- 0 #  ***   CHANGE Y AXIS MIN AS NEEDED/DESIRED
# ymax <- 3 #  ***   CHANGE Y AXIS MAX AS NEEDED/DESIRED
y<-1/(MasterFile$Actual[MasterFile$Year==yr]/MasterFile$Used[MasterFile$Year==yr])
colx<-as.character(MasterFile$kel[MasterFile$Year==yr])
cexx<-MasterFile$ptsz[MasterFile$Year==yr]
x<-c(1:num.stocks)#levels(MasterFile$Stock[MasterFile$Year==yr])
plot(x,y,pch="",xlab="",xaxt="n",ylab="Forecast/Actual",cex=2,main=yr,ylim=c(ymin,max(max(y,na.rm=TRUE),2.5)))
abline(h=1,lty="dashed")
axis(1,cex.axis=1,lwd=2,at=c(1:num.stocks),labels=as.character(MasterFile$Stock[MasterFile$Year==yr]),las=2)
box(lwd=2)
points(x,y,pch=MasterFile$sym[MasterFile$Year==yr],bg=colx,cex=cexx)
dev.off()
}
}
# Export data files used to generate figures
write.csv(MasterFile, file = paste(Outfile, "ForecastPerformanceData.csv", sep = ""), row.names = FALSE)
##########################
# Values for report text #
##########################
APEdat <- AppJ[!(AppJ$Year == "AVG"), ]
APEdat <- APEdat[APEdat$Year < EndYear, ]
model.agency <- na.omit(APEdat$Mod / APEdat$Agency)
agency.actual <- na.omit(APEdat$Agency / APEdat$Actual)
model.actual <- na.omit(APEdat$Mod / APEdat$Actual)
round((1 - mean(model.agency)) * 100, 1)
round((1 - mean(agency.actual)) * 100, 1)
round((1 - mean(model.actual)) * 100, 1)
