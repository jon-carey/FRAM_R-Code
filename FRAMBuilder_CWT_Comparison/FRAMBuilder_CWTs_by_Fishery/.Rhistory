sqlSave(con, Scalars_DB, tablename = "FisheryScalers", rownames = FALSE, append = TRUE)
# Pull PrimaryKey field from NonRetention table to determine max value
PK <- sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT NonRetention.PrimaryKey ",
"FROM NonRetention;"))
PK_Max <- max(PK)
# Generate PrimarkKey values for CNR Pass 2 inputs
CNR_P2$PrimaryKey <- seq(from = max(PK)+1, to = max(PK)+dim(CNR_P2)[1],by = 1)
CNR_P2 <- CNR_P2[ ,c(9,1:8)]
# Append new CNR inputs to databse
sqlSave(con, CNR_P2, tablename = "NonRetention", rownames = FALSE, append = TRUE)
close(con)
#################################################
#--- Export an excel file for record keeping ---#
#################################################
wb <- createWorkbook(type = "xlsx")
# Set up formats
TITLE_STYLE <- CellStyle(wb) + Font(wb,  heightInPoints=14, isItalic=TRUE, isBold=TRUE)
TABLE_COLNAMES_STYLE <- CellStyle(wb) + Font(wb, isBold = TRUE) +
Border(color = "black", position = c("BOTTOM"), pen = c("BORDER_THIN"))
# Sheet 1; Troll Data
sheet1 <- createSheet(wb, sheetName = "Troll Data")
addDataFrame(Trl_Base, sheet1, startRow = 2, colnamesStyle = TABLE_COLNAMES_STYLE)
addDataFrame(Trl_Effort, sheet1, startRow = 10, colnamesStyle = TABLE_COLNAMES_STYLE)
addDataFrame(Trl_Rate, sheet1, startRow = 18, colnamesStyle = TABLE_COLNAMES_STYLE)
rows <-createRow(sheet1,rowIndex=1)
table1Title <-createCell(rows, colIndex=2)
setCellValue(table1Title[[1,1]], "Troll Base Effort")
setCellStyle(table1Title[[1,1]], TITLE_STYLE)
rows <-createRow(sheet1,rowIndex=9)
table2Title <-createCell(rows, colIndex=2)
setCellValue(table2Title[[1,1]], "Troll Modeled Effort")
setCellStyle(table2Title[[1,1]], TITLE_STYLE)
rows <-createRow(sheet1,rowIndex=17)
table3Title <-createCell(rows, colIndex=2)
setCellValue(table3Title[[1,1]], "Troll Effort Scalers")
setCellStyle(table3Title[[1,1]], TITLE_STYLE)
# Sheet 2; Sport Data
sheet2 <- createSheet(wb, sheetName = "Sport Data")
addDataFrame(Spt_Base, sheet2, startRow = 2, colnamesStyle = TABLE_COLNAMES_STYLE)
addDataFrame(Spt_Effort, sheet2, startRow = 10, colnamesStyle = TABLE_COLNAMES_STYLE)
addDataFrame(Spt_Rate, sheet2, startRow = 18, colnamesStyle = TABLE_COLNAMES_STYLE)
rows <-createRow(sheet2,rowIndex=1)
table1Title <-createCell(rows, colIndex=2)
setCellValue(table1Title[[1,1]], "Sport Base Effort")
setCellStyle(table1Title[[1,1]], TITLE_STYLE)
rows <-createRow(sheet2,rowIndex=9)
table2Title <-createCell(rows, colIndex=2)
setCellValue(table2Title[[1,1]], "Sport Modeled Effort")
setCellStyle(table2Title[[1,1]], TITLE_STYLE)
rows <-createRow(sheet2,rowIndex=17)
table3Title <-createCell(rows, colIndex=2)
setCellValue(table3Title[[1,1]], "Sport Effort Scalers")
setCellStyle(table3Title[[1,1]], TITLE_STYLE)
# Sheet 3; Pass 1 Scalers
sheet3 <- createSheet(wb, sheetName = "Pass 1 Scalers")
addDataFrame(Scalars_P1, sheet3, startRow = 2, colnamesStyle = TABLE_COLNAMES_STYLE)
rows <-createRow(sheet3,rowIndex=1)
table1Title <-createCell(rows, colIndex=2)
setCellValue(table1Title[[1,1]], "Pass 1 Scalers")
setCellStyle(table1Title[[1,1]], TITLE_STYLE)
# Sheet 4; Pass 2 CNR
sheet4 <- createSheet(wb, sheetName = "Pass 2 CNR")
addDataFrame(CNR, sheet4, startRow = 2, colnamesStyle = TABLE_COLNAMES_STYLE)
addDataFrame(CNR_P2, sheet4, startRow = 2, startColumn = 10,
colnamesStyle = TABLE_COLNAMES_STYLE)
rows <-createRow(sheet4,rowIndex=1)
table1Title <-createCell(rows, colIndex=2)
setCellValue(table1Title[[1,1]], "CNR Calculation")
setCellStyle(table1Title[[1,1]], TITLE_STYLE)
table2Title <- createCell(rows, colIndex = 11)
setCellValue(table2Title[[1,1]], "Pass 2 CNR Inputs")
setCellStyle(table2Title[[1,1]], TITLE_STYLE)
saveWorkbook(wb, paste(dir, "SOF_CNR_R_Out; ", RunName[1,1], ".xlsx", sep = ""))
##################################################################################
#-------------- Pause R script to reload and run model run in FRAM --------------#
dlgMessage(paste("Don't forget to reload and run the model run again!"))$res
##################################################################################
shiny::runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Stock')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Stock')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Stock')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Stock')
# Clear the workspace
rm(list=ls())
# Load packages
library(RODBC)
# Set directory
dir <- "C:\\Users\\jonathan.carey\\Documents\\FRAM\\Calibration_Validation\\Chinook\\2019\\"
# Set paths
paths = list(paste(dir, "2019_FRAMBuilder_Rnd7_6.15.19.mdb", sep = ""),
paste(dir, "Auxiliaries\\IDL\\FRAM_BP_IDL_Clb1906.csv", sep = ""))
IDL <- read.csv(paths[[2]])
View(IDL)
# Pull existing FisheryScalars and CNR data
con <- odbcConnectAccess(paths[[2]])
recs = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT WireTagCode.Stock, CWDBRecovery.Fishery, CWDBRecovery.* ",
"FROM CWDBRecovery INNER JOIN WireTagCode ON CWDBRecovery.TagCode = WireTagCode.TagCode ",
"WHERE (((WireTagCode.Stock) In ('SUM','SPR','URB','LYF','LYY')) AND ((CWDBRecovery.Fishery)=4008)); "))
close(con)
close(con)
# Set paths
paths = list(paste(dir, "Auxiliaries\\IDL\\FRAM_BP_IDL_Clb1906.csv", sep = ""),
paste(dir, "2019_FRAMBuilder_Rnd7_6.15.19.mdb", sep = ""))
# Pull existing FisheryScalars and CNR data
con <- odbcConnectAccess(paths[[2]])
recs = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT WireTagCode.Stock, CWDBRecovery.Fishery, CWDBRecovery.* ",
"FROM CWDBRecovery INNER JOIN WireTagCode ON CWDBRecovery.TagCode = WireTagCode.TagCode ",
"WHERE (((WireTagCode.Stock) In ('SUM','SPR','URB','LYF','LYY')) AND ((CWDBRecovery.Fishery)=4008)); "))
close(con)
View(recs)
# Clear the workspace
rm(list=ls())
# Load packages
library(RODBC)
# Set directory
dir <- "C:\\Users\\jonathan.carey\\Documents\\FRAM\\Calibration_Validation\\Chinook\\2019\\"
# Set paths
paths = list(paste(dir, "Auxiliaries\\IDL\\FRAM_BP_IDL_Clb1906.csv", sep = ""),
paste(dir, "2019_FRAMBuilder_Rnd7_6.15.19.mdb", sep = ""))
# Read in IDL values
IDL <- read.csv(paths[[1]])
# Pull existing FisheryScalars and CNR data
con <- odbcConnectAccess(paths[[2]])
recs = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT WireTagCode.Stock, CWDBRecovery.Fishery, CWDBRecovery.* ",
"FROM CWDBRecovery INNER JOIN WireTagCode ON CWDBRecovery.TagCode = WireTagCode.TagCode ",
"WHERE (((WireTagCode.Stock) In ('SUM','SPR','URB','LYF','LYY')) AND ((CWDBRecovery.Fishery)=4008)); "))
close(con)
View(IDL)
# Merge recs with IDL values
recs <- merge(recs, IDL)
# Clear the workspace
rm(list=ls())
# Load packages
library(RODBC)
# Set directory
dir <- "C:\\Users\\jonathan.carey\\Documents\\FRAM\\Calibration_Validation\\Chinook\\2019\\"
# Set paths
paths = list(paste(dir, "Auxiliaries\\IDL\\FRAM_BP_IDL_Clb1906.csv", sep = ""),
paste(dir, "2019_FRAMBuilder_Rnd7_6.15.19.mdb", sep = ""))
# Read in IDL values
IDL <- read.csv(paths[[1]])
# Pull existing FisheryScalars and CNR data
con <- odbcConnectAccess(paths[[2]])
recs = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT WireTagCode.Stock, CWDBRecovery.Fishery, CWDBRecovery.* ",
"FROM CWDBRecovery INNER JOIN WireTagCode ON CWDBRecovery.TagCode = WireTagCode.TagCode ",
"WHERE (((WireTagCode.Stock) In ('SUM','SPR','URB','LYF','LYY')) AND ((CWDBRecovery.Fishery)=4008)); "))
close(con)
View(recs)
summaryBy(Species~Stock, data = recs, FUN = sum)
library(doBy)
summaryBy(Species~Stock, data = recs, FUN = sum)
summaryBy(Species~Stock, data = recs, FUN = sum)
recs$Species <- as.numeric(recs$Species)
summaryBy(Species~Stock, data = recs, FUN = sum)
# Merge recs with IDL values
recs <- merge(recs, IDL)
# Duplicate LYF for LYY
IDL_LYY <- IDL[IDL$Stock == "LYF", ]
rep("LYY", dim(IDL_LYY)[[1]])
IDL_LYY$Stock <- rep("LYY", dim(IDL_LYY)[[1]])
View(IDL_LYY)
IDL <- rbind(IDL,IDL_LYY)
# Clear the workspace
rm(list=ls())
# Load packages
library(RODBC)
library(doBy)
# Set directory
dir <- "C:\\Users\\jonathan.carey\\Documents\\FRAM\\Calibration_Validation\\Chinook\\2019\\"
# Set paths
paths = list(paste(dir, "Auxiliaries\\IDL\\FRAM_BP_IDL_Clb1906.csv", sep = ""),
paste(dir, "2019_FRAMBuilder_Rnd7_6.15.19.mdb", sep = ""))
# Read in IDL values
IDL <- read.csv(paths[[1]])
# Duplicate LYF for LYY
IDL_LYY <- IDL[IDL$Stock == "LYF", ]
IDL_LYY$Stock <- rep("LYY", dim(IDL_LYY)[[1]])
IDL <- rbind(IDL,IDL_LYY)
# Pull existing FisheryScalars and CNR data
con <- odbcConnectAccess(paths[[2]])
recs = sqlQuery(con, as.is = TRUE,
paste(sep = '',
"SELECT WireTagCode.Stock, CWDBRecovery.Fishery, CWDBRecovery.* ",
"FROM CWDBRecovery INNER JOIN WireTagCode ON CWDBRecovery.TagCode = WireTagCode.TagCode ",
"WHERE (((WireTagCode.Stock) In ('SUM','SPR','URB','LYF','LYY')) AND ((CWDBRecovery.Fishery)=4008)); "))
close(con)
# Merge recs with IDL values
recs <- merge(recs, IDL)
View(recs)
shiny::runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Stock')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Stock')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
outfile <- paths[[2]]
dat$Area_f <- factor(dat$Area, levels = c("Puget Sound", "Washington Coast", "Columbia River", "Oregon Coast"))
dat$Reg <- factor(dat$Reg, levels = c("MSF", "MIXED", "NSF"))
dat$Fishery <- factor(dat$Fishery, levels = c("NET", "SPORT", "TROLL", "ESC"))
dat <- dat[dat$Fishery != "ESC", ]
# Single figure with area facets
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(Area_f ~ Year, scales = "free") + theme(panel.margin.x = unit(1,"lines"))
p <- p + theme_bw() + scale_fill_manual(values=c("#FA8072", "#32CD32", "#6495ED"))
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + theme(axis.text.y = element_text(size = 8))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p <- p + theme(legend.position="bottom")
p
# Single figure with area facets
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(Area_f ~ Year, scales = "free") #+ theme(panel.margin.x = unit(1,"lines"))
p <- p + theme_bw() + scale_fill_manual(values=c("#FA8072", "#32CD32", "#6495ED"))
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + theme(axis.text.y = element_text(size = 8))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p <- p + theme(legend.position="bottom")
p
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
outfile <- paths[[2]]
dat$Area_f <- factor(dat$Area, levels = c("Puget Sound", "Washington Coast", "Columbia River", "Oregon Coast"))
dat$Reg <- factor(dat$Reg, levels = c("MSF", "MIXED", "NSF"))
dat$Fishery <- factor(dat$Fishery, levels = c("NET", "SPORT", "TROLL", "ESC"))
dat <- dat[dat$Fishery != "ESC", ]
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(Area_f ~ Year, scales = "free") #+ theme(panel.margin.x = unit(1,"lines"))
p <- p + theme_bw() + scale_fill_manual(values=c("#FA8072", "#32CD32", "#6495ED"))
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + theme(axis.text.y = element_text(size = 8))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p <- p + theme(legend.position="bottom")
p
p
ggsave(paste(outfile,"Fig_1-1_updateWAtroll.jpg",sep=""),p,height=7,width=7)
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
outfile <- paths[[2]]
dat$Area_f <- factor(dat$Area, levels = c("Puget Sound", "Washington Coast", "Columbia River", "Oregon Coast"))
dat$Reg <- factor(dat$Reg, levels = c("MSF", "MIXED", "NSF"))
dat$Fishery <- factor(dat$Fishery, levels = c("NET", "SPORT", "TROLL", "ESC"))
dat <- dat[dat$Fishery != "ESC", ]
# Single figure with area facets
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(Area_f ~ Year, scales = "free") #+ theme(panel.margin.x = unit(1,"lines"))
p <- p + theme_bw() + scale_fill_manual(values=c("#FA8072", "#32CD32", "#6495ED"))
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + theme(axis.text.y = element_text(size = 8))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p <- p + theme(legend.position="bottom")
p
ggsave(paste(outfile,"Fig_1-1_updateWAtroll.jpg",sep=""),p,height=7,width=7)
# Individual figure for each area
i=1
for(i in 1:length(unique(dat$Area))) {
Area <- unique(dat$Area)[i]
figdat <- dat[dat$Area == Area, ]
p <- ggplot(data = figdat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(. ~ Year)
p <- p + scale_fill_grey(start = 0, end = .9) + theme_bw()
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + ggtitle(Area) +
theme(plot.title=element_text(size=15, face="bold"))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
outfile <- paths[[2]]
dat$Area_f <- factor(dat$Area, levels = c("Puget Sound", "Washington Coast", "Columbia River", "Oregon Coast"))
dat$Reg <- factor(dat$Reg, levels = c("MSF", "MIXED", "NSF"))
dat$Fishery <- factor(dat$Fishery, levels = c("NET", "SPORT", "TROLL", "ESC"))
dat <- dat[dat$Fishery != "ESC", ]
# Single figure with area facets
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(Area_f ~ Year, scales = "free") #+ theme(panel.margin.x = unit(1,"lines"))
p <- p + theme_bw() + scale_fill_manual(values=c("#FA8072", "#32CD32", "#6495ED"))
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + theme(axis.text.y = element_text(size = 8))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p <- p + theme(legend.position="bottom")
p
ggsave(paste(outfile,"Fig_1-1_updateWAtroll.jpg",sep=""),p,height=7,width=7)
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
outfile <- paths[[2]]
dat$Area_f <- factor(dat$Area, levels = c("Puget Sound", "Washington Coast", "Columbia River", "Oregon Coast"))
dat$Reg <- factor(dat$Reg, levels = c("MSF", "MIXED", "NSF"))
dat$Fishery <- factor(dat$Fishery, levels = c("NET", "SPORT", "TROLL", "ESC"))
dat <- dat[dat$Fishery != "ESC", ]
# Single figure with area facets
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(Area_f ~ Year, scales = "free") #+ theme(panel.margin.x = unit(1,"lines"))
p <- p + theme_bw() + scale_fill_manual(values=c("#FA8072", "#32CD32", "#6495ED"))
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + theme(axis.text.y = element_text(size = 8))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p <- p + theme(legend.position="bottom")
p
ggsave(paste(outfile,"Fig_1-1_updateWAtroll.jpg",sep=""),p,height=7,width=7)
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
outfile <- paths[[2]]
dat$Area_f <- factor(dat$Area, levels = c("Puget Sound", "Washington Coast", "Columbia River", "Oregon Coast"))
dat$Reg <- factor(dat$Reg, levels = c("MSF", "MIXED", "NSF"))
dat$Fishery <- factor(dat$Fishery, levels = c("TROLL", "SPORT", "NET", "ESC"))
dat <- dat[dat$Fishery != "ESC", ]
# Single figure with area facets
p <- ggplot(data = dat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(Area_f ~ Year, scales = "free") #+ theme(panel.margin.x = unit(1,"lines"))
p <- p + theme_bw() + scale_fill_manual(values=c("#FA8072", "#32CD32", "#6495ED"))
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + theme(axis.text.y = element_text(size = 8))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p <- p + theme(legend.position="bottom")
p
ggsave(paste(outfile,"Fig_1-1_updateWAtroll.jpg",sep=""),p,height=7,width=7)
# Individual figure for each area
i=1
for(i in 1:length(unique(dat$Area))) {
Area <- unique(dat$Area)[i]
figdat <- dat[dat$Area == Area, ]
p <- ggplot(data = figdat, aes(Reg, Catch/1000, fill=Fishery))
p <- p + geom_bar(width=0.8, size = 0.1, color="black", alpha=1, position="stack",
stat="identity")
p <- p + facet_grid(. ~ Year)
p <- p + scale_fill_grey(start = 0, end = .9) + theme_bw()
p <- p + theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.25))
p <- p + ggtitle(Area) +
theme(plot.title=element_text(size=15, face="bold"))
p <- p + ylab("Catch (thousands)") + xlab("Regulation")
p
ggsave(paste(outfile,"Fig_1-1_", Area, ".jpg",sep=""),p,height=5,width=7.5)
}
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
View(dat)
dat[1,1]
length(dat[1,1])
str_length(dat[1,1])
nchar(dat[1,1])
library(stringr)
str_length(dat[1,1])
dat1 <- substr(dat$Area,1,str_length(dat$Area)-6)
dat1
eroin <- cbind(dat$Area,dat1)
View(eroin)
dat$Area
View(eroin)
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
dat1 <- substr(dat$Area,1,str_length(dat$Area))
dat2 <- substr(dat$Area,1,str_length(dat$Area)-6)
hereitis <- cbind(dat$Area,dat1)
hereitis <- cbind(dat1,dat2)
View(hereitis)
dat2 <- substr(dat1,1,str_length(dat1)-6)
hereitis <- cbind(dat1,dat2)
hereitis
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
dat$Area <- substr(dat$Area,1,str_length(dat$Area)-6)
View(dat)
View(dat)
# Clear workspace
rm(list=ls(all=TRUE))
# Load required libraries
library(ggplot2)
# Set the paths
paths = list("C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\DatFig1-1_updateWAtroll_8.8.19.csv",
"C:\\Users\\jonathan.carey\\Documents\\PSC\\SFEC\\Coho DIT Report\\")
dat <- read.csv(paths[[1]])
dat$Area2 <- substr(dat$Area,1,str_length(dat$Area)-6)
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
dat <- read.csv("C:\Users\jonathan.carey\Desktop\SEAK_untiered.csv")
dat <- read.csv("C:\\Users\\jonathan.carey\\Desktop\\SEAK_untiered.csv")
View(dat)
library(ggplot2)
dat <- read.csv("C:\\Users\\jonathan.carey\\Desktop\\SEAK_untiered.csv")
View(dat)
p <- ggplot(dat, aes(x = Year, y = TAC, color = Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(size=2, alpha=.75)
p
p <- ggplot(dat, aes(x = Year, y = TAC, fill = Scenario, color = Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(size=2, alpha=.75)
p
dat <- read.csv("C:\\Users\\jonathan.carey\\Desktop\\SEAK_untiered.csv")
p <- ggplot(dat, aes(x = Year, y = TAC, fill = Scenario, color = Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(size=2, alpha=.75)
p
p <- ggplot(dat, aes(x = Year, y = TAC, fill = Scenario, color = Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(size=2, alpha=.75) +
theme(panel.background=element_blank())
p
p <- ggplot(dat, aes(x = Year, y = TAC, fill = Scenario, color = Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(size=2, alpha=.75) +
theme_bw()
p
p <- ggplot(dat, aes(x=Year, y=TAC, color=Scenario)) +
geom_line(size=2, alpha=0.75) + geom_point(shape =1, size=2, alpha=.75) +
theme_bw()
p
p <- ggplot(dat, aes(x=Year, y=TAC, color=Scenario)) +
geom_line(size=1.25, alpha=0.75) + geom_point(shape =1, size=2, alpha=.75) +
theme_bw()
p
p <- ggplot(dat, aes(x=Year, y=TAC, color=Scenario)) +
geom_line(size=1.25, alpha=0.75) + geom_point(shape =1, size=3, alpha=.75) +
theme_bw()
p
p <- ggplot(dat, aes(x=Year, y=TAC, color=Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(shape =1, size=3, alpha=.75) +
theme_bw()
p
p <- ggplot(dat, aes(x=Year, y=TAC, color=Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(shape =1, size=3, alpha=.75) +
theme_bw() + theme(legend.position="top")
p
p <- ggplot(dat, aes(x=Year, y=TAC, color=Scenario)) +
geom_line(size=1, alpha=0.75) + geom_point(shape =1, size=3, alpha=.75) +
theme_bw() + theme(legend.position="top") + theme(legend.title = element_blank())
p
shiny::runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Stock')
runApp('FRAM/Calibration_Validation/Chinook/2019/CompFigs/FRAMBuilder_CWTs_by_Fishery')
